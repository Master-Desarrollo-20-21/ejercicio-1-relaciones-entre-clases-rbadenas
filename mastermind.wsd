@startuml Mastermind


class Mastermind {
    -Game game
    +play() : void
    -newGameInitialization() : void
    -isResumed() : bool
}



class Game {
    +{static} final int MAX_ATTEMPTS = 10
    -secretCombination : SecretCombination
    -attempts : Attempt[]
    -attemptCount : int
    +play() : void
    -newAttempt() : void
    -printAttempts() : void
    -printGameResult() : void
    -isGameOver() : bool
    -isMaxAttemptsExceeded() : bool
    -lastAttemptIsSuccessful(): bool
}

class Attempt{
    -proposedCombination : ProposedCombination
    -result : Result
    +isSuccessful() : bool
    +show() : void
    -askForCombination() : void
}


class Result{
    -blacks : int
    -whites : int
    -hasAllBlacks() : bool
    -toString() : string
}

enum Color{
    RED('r')
    GREEN('g')
    BLUE ('b')
    YELLOW('y')
    ORANGE('o')
    PINK('p')

    +{static} final string COLOR_LETTERS
    -letter : char
    +getColorByLetter() : Color
    +isValidLetter() : bool
    +isSameColorAs(color : Color) : bool
    +toString() : string

}

abstract class Combination{
    +{static} final int COMBINATION_LENGTH = 4
    #colors : Color[]
    +{static} isValid(proposed : string) : bool
    +{static} printErrors(prpposed : string) : void
    -isValidColor() : bool
    -hasDuplicateColors(proposed : string) : bool
}

class SecretCombination{
    +evalueCombination(proposedCombination) : Result
    -{static} generateRandomString() : string
    -{static} randomIndex(arrayLength : int) : int
}

class ProposedCombination{
    +toString() : string
}

class Console{
    +out(promptMessage : string) : void
    +askForString(promptMessage : string) : string
}


Mastermind *--> Game

Game *--> SecretCombination
Game o--> "0..10" Attempt

Combination <|-- SecretCombination
Combination <|-- ProposedCombination

Combination *--> "4" Color

Attempt *--> ProposedCombination
Attempt *--> Result

Attempt ..> SecretCombination

Mastermind .> Console
Game .> Console
Attempt .> Console
Combination .> Console

@enduml